{"ast":null,"code":"/* eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }] */\nvar _ = require('lodash'); // function to count amount of overall wins per players\n\n\nfunction countWins(arr) {\n  return arr.reduce(function (winners, place) {\n    if (place.placement[0] in winners) {\n      winners[place.placement[0]] += 1; // eslint-disable-line no-param-reassign\n    } else {\n      winners[place.placement[0]] = 1; // eslint-disable-line no-param-reassign\n    }\n\n    return winners;\n  }, {});\n} // count amount of times tracks are picked\n\n\nfunction countTracks(arr) {\n  var tracks = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (tracks[arr[i].track]) {\n      tracks[arr[i].track] += 1;\n    } else {\n      tracks[arr[i].track] = 1;\n    }\n  }\n\n  return tracks;\n} // count amount of times characters are played\n\n\nfunction countCharacters(arr) {\n  var chars = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (chars[arr[i].character]) {\n      chars[arr[i].character] += 1;\n    } else {\n      chars[arr[i].character] = 1;\n    }\n  }\n\n  return chars;\n} // sort winners by amount of times won, descending\n\n\nfunction sortWinners(obj) {\n  var winnersArr = Object.entries(obj);\n  var sorted = winnersArr.sort(function (a, b) {\n    return b[1] - a[1];\n  });\n  return sorted;\n}\n/* eslint-disable */\n// find championship games\n\n\nfunction findChamps(arr) {\n  return arr.filter(function (val) {\n    return val.championship = 'true';\n  });\n}\n/* eslint-enable */\n// count winners from champ games\n\n\nfunction countChampWins(champArr) {\n  var arr = findChamps(champArr);\n  var winners = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (winners[arr[i].races[0].placement[0]]) {\n      winners[arr[i].races[0].placement[0]].value += 1;\n    } else {\n      winners[arr[i].races[0].placement[0]] = {\n        value: 0\n      };\n    }\n  }\n\n  return winners;\n} // sorted champ winning data\n\n\nfunction sortedChampWinnerData(data) {\n  return sortWinners(countChampWins(data));\n} // sorted overall winning data\n\n\nfunction sortedWinnerData(data) {\n  return sortWinners(countWins(data));\n} // sorted track data\n\n\nfunction sortedTrackData(data) {\n  return sortWinners(countTracks(data));\n} // sorted character data\n\n\nfunction sortedCharacterData(data) {\n  return sortWinners(countCharacters(data));\n} // match players with chosen tracks\n// use with flattened race variable\n\n\nfunction playerTracks(arr) {\n  var playTracks = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (!playTracks[arr[i].chosen_by] && arr[i].chosen_by !== 'championship') {\n      playTracks[arr[i].chosen_by] = [];\n    }\n\n    if (playTracks[arr[i].chosen_by]) {\n      playTracks[arr[i].chosen_by].push(arr[i].track);\n    }\n  }\n\n  return Object.entries(playTracks);\n} // players - characters\n// use with flattened players variable\n\n\nfunction playersChars(arr) {\n  var playChars = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (!playChars[arr[i].name]) {\n      playChars[arr[i].name] = [];\n    }\n\n    if (playChars[arr[i].name]) {\n      playChars[arr[i].name].push(arr[i].character);\n    }\n  }\n\n  return Object.entries(playChars);\n} // find most frequent, can be used for tracks & characters\n\n\nfunction findMostFreqLodash(arr) {\n  var resultArr = [];\n\n  var result = function result(ar) {\n    return _.head(_(ar).countBy().entries().maxBy('[1]'));\n  };\n\n  for (var i = 0; i < arr.length; i++) {\n    resultArr.push({\n      name: arr[i][0],\n      val: result(arr[i][1])\n    });\n  }\n\n  return resultArr;\n}\n\nmodule.exports = {\n  countWins: countWins,\n  sortWinners: sortWinners,\n  sortedWinnerData: sortedWinnerData,\n  sortedChampWinnerData: sortedChampWinnerData,\n  sortedTrackData: sortedTrackData,\n  sortedCharacterData: sortedCharacterData,\n  playerTracks: playerTracks,\n  playersChars: playersChars,\n  findMostFreqLodash: findMostFreqLodash\n};","map":{"version":3,"sources":["/Users/leighblechman/Desktop/marioClient/app/src/utils/dataHelpers.js"],"names":["_","require","countWins","arr","reduce","winners","place","placement","countTracks","tracks","i","length","track","countCharacters","chars","character","sortWinners","obj","winnersArr","Object","entries","sorted","sort","a","b","findChamps","filter","val","championship","countChampWins","champArr","races","value","sortedChampWinnerData","data","sortedWinnerData","sortedTrackData","sortedCharacterData","playerTracks","playTracks","chosen_by","push","playersChars","playChars","name","findMostFreqLodash","resultArr","result","ar","head","countBy","maxBy","module","exports"],"mappings":"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","sourcesContent":["/* eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }] */\nconst _ = require('lodash');\n\n// function to count amount of overall wins per players\nfunction countWins(arr) {\n  return arr.reduce((winners, place) => {\n    if (place.placement[0] in winners) {\n      winners[place.placement[0]] += 1; // eslint-disable-line no-param-reassign\n    } else {\n      winners[place.placement[0]] = 1; // eslint-disable-line no-param-reassign\n    }\n    return winners;\n  }, {});\n}\n\n// count amount of times tracks are picked\nfunction countTracks(arr) {\n  const tracks = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (tracks[arr[i].track]) {\n      tracks[arr[i].track] += 1;\n    } else {\n      tracks[arr[i].track] = 1;\n    }\n  }\n  return tracks;\n}\n\n// count amount of times characters are played\nfunction countCharacters(arr) {\n  const chars = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (chars[arr[i].character]) {\n      chars[arr[i].character] += 1;\n    } else {\n      chars[arr[i].character] = 1;\n    }\n  }\n  return chars;\n}\n\n// sort winners by amount of times won, descending\nfunction sortWinners(obj) {\n  const winnersArr = Object.entries(obj);\n  const sorted = winnersArr.sort((a, b) => (\n    b[1] - a[1]\n  ));\n  return sorted;\n}\n\n\n/* eslint-disable */\n// find championship games\nfunction findChamps(arr) {\n  return arr.filter(val => (\n    val.championship = 'true'\n  ));\n}\n/* eslint-enable */\n\n// count winners from champ games\nfunction countChampWins(champArr) {\n  const arr = findChamps(champArr);\n  const winners = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (winners[arr[i].races[0].placement[0]]) {\n      winners[arr[i].races[0].placement[0]].value += 1;\n    } else {\n      winners[arr[i].races[0].placement[0]] = { value: 0 };\n    }\n  }\n\n  return winners;\n}\n\n// sorted champ winning data\nfunction sortedChampWinnerData(data) {\n  return sortWinners(countChampWins(data));\n}\n\n// sorted overall winning data\nfunction sortedWinnerData(data) {\n  return sortWinners(countWins(data));\n}\n\n// sorted track data\nfunction sortedTrackData(data) {\n  return sortWinners(countTracks(data));\n}\n\n// sorted character data\nfunction sortedCharacterData(data) {\n  return sortWinners(countCharacters(data));\n}\n\n// match players with chosen tracks\n// use with flattened race variable\nfunction playerTracks(arr) {\n  const playTracks = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (!playTracks[arr[i].chosen_by] && arr[i].chosen_by !== 'championship') {\n      playTracks[arr[i].chosen_by] = [];\n    }\n    if (playTracks[arr[i].chosen_by]) {\n      playTracks[arr[i].chosen_by].push(arr[i].track);\n    }\n  }\n  return Object.entries(playTracks);\n}\n\n// players - characters\n// use with flattened players variable\nfunction playersChars(arr) {\n  const playChars = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (!playChars[arr[i].name]) {\n      playChars[arr[i].name] = [];\n    }\n    if (playChars[arr[i].name]) {\n      playChars[arr[i].name].push(arr[i].character);\n    }\n  }\n  return Object.entries(playChars);\n}\n\n\n// find most frequent, can be used for tracks & characters\nfunction findMostFreqLodash(arr) {\n  const resultArr = [];\n  const result = ar => (\n    _.head(_(ar)\n      .countBy()\n      .entries()\n      .maxBy('[1]'))\n  );\n  for (let i = 0; i < arr.length; i++) {\n    resultArr.push({ name: arr[i][0], val: result(arr[i][1]) });\n  }\n  return resultArr;\n}\n\nmodule.exports = {\n  countWins,\n  sortWinners,\n  sortedWinnerData,\n  sortedChampWinnerData,\n  sortedTrackData,\n  sortedCharacterData,\n  playerTracks,\n  playersChars,\n  findMostFreqLodash,\n};\n"]},"metadata":{},"sourceType":"module"}