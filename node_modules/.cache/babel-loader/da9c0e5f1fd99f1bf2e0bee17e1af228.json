{"ast":null,"code":"/* eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }] */\nvar _ = require('lodash/core'); // function to count amount of overall wins per players\n\n\nfunction countWins(arr) {\n  var winners = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (winners[arr[i].placement[0]]) {\n      winners[arr[i].placement[0]] += 1;\n    } else {\n      winners[arr[i].placement[0]] = 1;\n    }\n  }\n\n  return winners;\n} // sort winners by amount of times won, descending\n\n\nfunction sortWinners(obj) {\n  var winnersArr = Object.entries(obj);\n  var sorted = winnersArr.sort(function (a, b) {\n    return a[1].value < b[1].value;\n  });\n  return sorted;\n}\n/* eslint-disable */\n// find championship games\n\n\nfunction findChamps(arr) {\n  return arr.filter(function (val) {\n    return val.championship = 'true';\n  });\n}\n/* eslint-enable */\n// count winners from champ games\n\n\nfunction countChampWins(champArr) {\n  var arr = findChamps(champArr);\n  var winners = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (winners[arr[i].races[0].placement[0]]) {\n      winners[arr[i].races[0].placement[0]].value += 1;\n    } else {\n      winners[arr[i].races[0].placement[0]] = {\n        value: 0\n      };\n    }\n  }\n\n  return winners;\n} // sorted champ winning data\n\n\nfunction sortedChampWinnerData(data) {\n  return sortWinners(countChampWins(data));\n} // sorted overall winning data\n\n\nfunction sortedWinnerData(data) {\n  return sortWinners(countWins(data));\n} // match players with chosen tracks\n// use with flattened race variable\n\n\nfunction playerTracks(arr) {\n  var playTracks = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (!playTracks[arr[i].chosen_by] && arr[i].chosen_by !== 'championship') {\n      playTracks[arr[i].chosen_by] = [];\n    }\n\n    if (playTracks[arr[i].chosen_by]) {\n      playTracks[arr[i].chosen_by].push(arr[i].track);\n    }\n  }\n\n  return Object.entries(playTracks);\n} // players - characters\n// use with flattened players variable\n\n\nfunction playersChars(arr) {\n  var playChars = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (!playChars[arr[i].name]) {\n      playChars[arr[i].name] = [];\n    }\n\n    if (playChars[arr[i].name]) {\n      playChars[arr[i].name].push(arr[i].character);\n    }\n  }\n\n  return Object.entries(playChars);\n} // find most frequent, can be used for tracks & characters\n\n\nfunction findMostFreqLodash(arr) {\n  var resultArr = [];\n\n  var result = function result(ar) {\n    return _.head(_(ar).countBy().entries().maxBy('[1]'));\n  };\n\n  for (var i = 0; i < arr.length; i++) {\n    resultArr.push({\n      name: arr[i][0],\n      val: result(arr[i][1])\n    });\n  }\n\n  return resultArr;\n}\n\nmodule.exports = {\n  countWins: countWins,\n  sortWinners: sortWinners,\n  sortedWinnerData: sortedWinnerData,\n  sortedChampWinnerData: sortedChampWinnerData,\n  playerTracks: playerTracks,\n  playersChars: playersChars,\n  findMostFreqLodash: findMostFreqLodash\n};","map":{"version":3,"sources":["/Users/leighblechman/Desktop/marioClient/app/src/utils/dataHelpers.js"],"names":["_","require","countWins","arr","winners","i","length","placement","sortWinners","obj","winnersArr","Object","entries","sorted","sort","a","b","value","findChamps","filter","val","championship","countChampWins","champArr","races","sortedChampWinnerData","data","sortedWinnerData","playerTracks","playTracks","chosen_by","push","track","playersChars","playChars","name","character","findMostFreqLodash","resultArr","result","ar","head","countBy","maxBy","module","exports"],"mappings":"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","sourcesContent":["/* eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }] */\nconst _ = require('lodash/core');\n\n// function to count amount of overall wins per players\nfunction countWins(arr) {\n  const winners = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (winners[arr[i].placement[0]]) {\n      winners[arr[i].placement[0]] += 1;\n    } else {\n      winners[arr[i].placement[0]] = 1;\n    }\n  }\n  return winners;\n}\n\n// sort winners by amount of times won, descending\nfunction sortWinners(obj) {\n  const winnersArr = Object.entries(obj);\n  const sorted = winnersArr.sort((a, b) => (\n    a[1].value < b[1].value\n  ));\n  return sorted;\n}\n\n/* eslint-disable */\n// find championship games\nfunction findChamps(arr) {\n  return arr.filter(val => (\n    val.championship = 'true'\n  ));\n}\n/* eslint-enable */\n\n// count winners from champ games\nfunction countChampWins(champArr) {\n  const arr = findChamps(champArr);\n  const winners = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (winners[arr[i].races[0].placement[0]]) {\n      winners[arr[i].races[0].placement[0]].value += 1;\n    } else {\n      winners[arr[i].races[0].placement[0]] = { value: 0 };\n    }\n  }\n\n  return winners;\n}\n\n// sorted champ winning data\nfunction sortedChampWinnerData(data) {\n  return sortWinners(countChampWins(data));\n}\n\n// sorted overall winning data\nfunction sortedWinnerData(data) {\n  return sortWinners(countWins(data));\n}\n\n// match players with chosen tracks\n// use with flattened race variable\nfunction playerTracks(arr) {\n  const playTracks = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (!playTracks[arr[i].chosen_by] && arr[i].chosen_by !== 'championship') {\n      playTracks[arr[i].chosen_by] = [];\n    }\n    if (playTracks[arr[i].chosen_by]) {\n      playTracks[arr[i].chosen_by].push(arr[i].track);\n    }\n  }\n  return Object.entries(playTracks);\n}\n\n// players - characters\n// use with flattened players variable\nfunction playersChars(arr) {\n  const playChars = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (!playChars[arr[i].name]) {\n      playChars[arr[i].name] = [];\n    }\n    if (playChars[arr[i].name]) {\n      playChars[arr[i].name].push(arr[i].character);\n    }\n  }\n  return Object.entries(playChars);\n}\n\n\n// find most frequent, can be used for tracks & characters\nfunction findMostFreqLodash(arr) {\n  const resultArr = [];\n  const result = ar => (\n    _.head(_(ar)\n      .countBy()\n      .entries()\n      .maxBy('[1]'))\n  );\n  for (let i = 0; i < arr.length; i++) {\n    resultArr.push({ name: arr[i][0], val: result(arr[i][1]) });\n  }\n  return resultArr;\n}\n\nmodule.exports = {\n  countWins,\n  sortWinners,\n  sortedWinnerData,\n  sortedChampWinnerData,\n  playerTracks,\n  playersChars,\n  findMostFreqLodash,\n};\n"]},"metadata":{},"sourceType":"module"}