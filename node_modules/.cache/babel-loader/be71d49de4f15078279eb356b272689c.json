{"ast":null,"code":"/* eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }] */\n// function to grab unique players, and assign them a list of their played characters\n// should only be used on the Heats section of the data (data.Heats), & after it has been flattened\nfunction orderPlayers(arr) {\n  var playersChars = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (playersChars[arr[i].name]) {\n      playersChars[arr[i].name].push(arr[i].character);\n    } else {\n      playersChars[arr[i].name] = [arr[i].character];\n    }\n  }\n\n  return playersChars;\n} // function to count amount of overall wins per players\n\n\nfunction countWins(arr) {\n  var winners = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (winners[arr[i].placement[0]]) {\n      winners[arr[i].placement[0]] += 1;\n    } else {\n      winners[arr[i].placement[0]] = 1;\n    }\n  }\n\n  return winners;\n} // sort winners by amount of times won, descending\n\n\nfunction sortWinners(obj) {\n  var dataArr = [];\n  var winnersArr = Object.entries(obj); // console.log(winnersArr[0][1].value)\n\n  var sorted = winnersArr.sort(function (a, b) {\n    return a[1].value < b[1].value;\n  });\n  sorted.forEach(function (el) {\n    return dataArr.push({\n      name: el[0],\n      value: el[1].value,\n      fill: '#70bbfd'\n    });\n  });\n  return dataArr;\n} // sorted data\n\n\nfunction sortedWinnerData(data) {\n  return sortWinners(countWins(data));\n}\n\nmodule.exports = {\n  orderPlayers: orderPlayers,\n  countWins: countWins,\n  sortWinners: sortWinners,\n  sortedWinnerData: sortedWinnerData\n};","map":{"version":3,"sources":["/Users/leighblechman/Desktop/marioClient/app/src/utils/players.js"],"names":["orderPlayers","arr","playersChars","i","length","name","push","character","countWins","winners","placement","sortWinners","obj","dataArr","winnersArr","Object","entries","sorted","sort","a","b","value","forEach","el","fill","sortedWinnerData","data","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,MAAMC,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAID,YAAY,CAACD,GAAG,CAACE,CAAD,CAAH,CAAOE,IAAR,CAAhB,EAA+B;AAC7BH,MAAAA,YAAY,CAACD,GAAG,CAACE,CAAD,CAAH,CAAOE,IAAR,CAAZ,CAA0BC,IAA1B,CAA+BL,GAAG,CAACE,CAAD,CAAH,CAAOI,SAAtC;AACD,KAFD,MAEO;AACLL,MAAAA,YAAY,CAACD,GAAG,CAACE,CAAD,CAAH,CAAOE,IAAR,CAAZ,GAA4B,CAACJ,GAAG,CAACE,CAAD,CAAH,CAAOI,SAAR,CAA5B;AACD;AACF;;AACD,SAAOL,YAAP;AACD,C,CAED;;;AACA,SAASM,SAAT,CAAmBP,GAAnB,EAAwB;AACtB,MAAMQ,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAIM,OAAO,CAACR,GAAG,CAACE,CAAD,CAAH,CAAOO,SAAP,CAAiB,CAAjB,CAAD,CAAX,EAAkC;AAChCD,MAAAA,OAAO,CAACR,GAAG,CAACE,CAAD,CAAH,CAAOO,SAAP,CAAiB,CAAjB,CAAD,CAAP,IAAgC,CAAhC;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACR,GAAG,CAACE,CAAD,CAAH,CAAOO,SAAP,CAAiB,CAAjB,CAAD,CAAP,GAA+B,CAA/B;AACD;AACF;;AACD,SAAOD,OAAP;AACD,C,CAED;;;AACA,SAASE,WAAT,CAAqBC,GAArB,EAA0B;AACxB,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAeJ,GAAf,CAAnB,CAFwB,CAGxB;;AACA,MAAMK,MAAM,GAAGH,UAAU,CAACI,IAAX,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAC7BD,CAAC,CAAC,CAAD,CAAD,CAAKE,KAAL,GAAaD,CAAC,CAAC,CAAD,CAAD,CAAKC,KADW;AAAA,GAAhB,CAAf;AAGAJ,EAAAA,MAAM,CAACK,OAAP,CAAe,UAAAC,EAAE;AAAA,WACfV,OAAO,CAACP,IAAR,CAAa;AAAED,MAAAA,IAAI,EAAEkB,EAAE,CAAC,CAAD,CAAV;AAAeF,MAAAA,KAAK,EAAEE,EAAE,CAAC,CAAD,CAAF,CAAMF,KAA5B;AAAmCG,MAAAA,IAAI,EAAE;AAAzC,KAAb,CADe;AAAA,GAAjB;AAGA,SAAOX,OAAP;AACD,C,CAED;;;AACA,SAASY,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,SAAOf,WAAW,CAACH,SAAS,CAACkB,IAAD,CAAV,CAAlB;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACf5B,EAAAA,YAAY,EAAZA,YADe;AAEfQ,EAAAA,SAAS,EAATA,SAFe;AAGfG,EAAAA,WAAW,EAAXA,WAHe;AAIfc,EAAAA,gBAAgB,EAAhBA;AAJe,CAAjB","sourcesContent":["/* eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }] */\n\n// function to grab unique players, and assign them a list of their played characters\n// should only be used on the Heats section of the data (data.Heats), & after it has been flattened\nfunction orderPlayers(arr) {\n  const playersChars = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (playersChars[arr[i].name]) {\n      playersChars[arr[i].name].push(arr[i].character);\n    } else {\n      playersChars[arr[i].name] = [arr[i].character];\n    }\n  }\n  return playersChars;\n}\n\n// function to count amount of overall wins per players\nfunction countWins(arr) {\n  const winners = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (winners[arr[i].placement[0]]) {\n      winners[arr[i].placement[0]] += 1;\n    } else {\n      winners[arr[i].placement[0]] = 1;\n    }\n  }\n  return winners;\n}\n\n// sort winners by amount of times won, descending\nfunction sortWinners(obj) {\n  const dataArr = []\n  const winnersArr = Object.entries(obj);\n  // console.log(winnersArr[0][1].value)\n  const sorted = winnersArr.sort((a, b) => (\n    a[1].value < b[1].value\n  ));\n  sorted.forEach(el => (\n    dataArr.push({ name: el[0], value: el[1].value, fill: '#70bbfd' })\n  ));\n  return dataArr;\n}\n\n// sorted data\nfunction sortedWinnerData(data) {\n  return sortWinners(countWins(data));\n}\n\nmodule.exports = {\n  orderPlayers,\n  countWins,\n  sortWinners,\n  sortedWinnerData,\n};\n"]},"metadata":{},"sourceType":"module"}